{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "TV Library Backend",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation for TV Library Server based on the OpenAPI 3.0 specification. \nSome useful links:\n- [TV Library Backend repository](https://github.com/DmytriiTsybuliak/movies-library-backend)\n- [The source API definition for the TV Library Backend](https://github.com/DmytriiTsybuliak/movies-library-backend/docs/openapi.yaml)"
  },
  "servers": [
    {
      "url": "http://localhost:6000"
    },
    {
      "url": "https://example.com/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Favorite",
      "description": "List of saved movies and TV shows for users."
    },
    {
      "name": "Auth",
      "description": "Operations about user."
    }
  ],
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "paths": {
    "/favorite": {
      "get": {
        "tags": [
          "Favorite"
        ],
        "summary": "Finds Favorites",
        "description": "Finds Favorites by user",
        "operationId": "getFavorites",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found favorites"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/favorite"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "favorite": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "releaseDate",
          "genre",
          "userId",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "Movie/TV id",
            "type": "string",
            "example": "34e4decdd286b30065d54af9"
          },
          "title": {
            "description": "Movie/TV title",
            "type": "string",
            "example": "Deadpool"
          },
          "releaseDate": {
            "description": "Movie/TV releaseDate",
            "type": "string",
            "example": "2025"
          },
          "genre": {
            "description": "Movie/TV genre",
            "type": "string",
            "example": "Action"
          },
          "userId": {
            "description": "User ID of user",
            "type": "string",
            "example": "6744b9fa34234548ecf5ffeb"
          },
          "createdAt": {
            "description": "Movie/TV createdAt",
            "type": "string",
            "example": "2024-11-30T18:51:57.277Z"
          },
          "updatedAt": {
            "description": "Movie/TV updatedAt",
            "type": "string",
            "example": "2024-11-30T18:51:57.277Z"
          }
        }
      }
    },
    "responses": {
      "401": {
        "description": "Authorization information is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}